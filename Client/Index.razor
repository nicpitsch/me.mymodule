@using Microsoft.Extensions.Localization
@using Me.MyModule.Services
@using Me.MyModule.Models

@namespace Me.MyModule
@inherits ModuleBase
@inject IMyModuleService MyModuleService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer

@if (_MyModules == null)
{
    <p><em>@Localizer["Loading..."]</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add MyModule" ResourceKey="Add" />
    <br />
    <br />
    @if (@_MyModules.Count != 0)
    {
        <Pager Items="@_MyModules">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>Name</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.MyModuleId.ToString())" ResourceKey="Edit" /></td>
                <td><ActionDialog Header="Delete MyModule" Message="@("Are You Sure You Wish To Delete The " + context.Name + " MyModule?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>@Localizer["NothingToDisplay"]</p>
    }
}

@code {
    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<MyModule> _MyModules;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _MyModules = await MyModuleService.GetMyModulesAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading MyModule {Error}", ex.Message);
            AddModuleMessage("Error Loading MyModule", MessageType.Error);
        }
    }

    private async Task Delete(MyModule MyModule)
    {
        try
        {
            await MyModuleService.DeleteMyModuleAsync(MyModule.MyModuleId, ModuleState.ModuleId);
            await logger.LogInformation("MyModule Deleted {MyModule}", MyModule);
            _MyModules = await MyModuleService.GetMyModulesAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting MyModule {MyModule} {Error}", MyModule, ex.Message);
            AddModuleMessage("Error Deleting MyModule", MessageType.Error);
        }
    }
}